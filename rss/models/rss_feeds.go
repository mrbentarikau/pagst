// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RSSFeed is an object representing the database table.
type RSSFeed struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID     int64     `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Enabled     bool      `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	ChannelID   int64     `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	MentionRole int64     `boil:"mention_role" json:"mention_role" toml:"mention_role" yaml:"mention_role"`
	FeedName    string    `boil:"feed_name" json:"feed_name" toml:"feed_name" yaml:"feed_name"`
	FeedTitle   string    `boil:"feed_title" json:"feed_title" toml:"feed_title" yaml:"feed_title"`
	FeedURL     string    `boil:"feed_url" json:"feed_url" toml:"feed_url" yaml:"feed_url"`

	R *rssFeedR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rssFeedL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RSSFeedColumns = struct {
	ID          string
	GuildID     string
	CreatedAt   string
	Enabled     string
	ChannelID   string
	MentionRole string
	FeedName    string
	FeedTitle   string
	FeedURL     string
}{
	ID:          "id",
	GuildID:     "guild_id",
	CreatedAt:   "created_at",
	Enabled:     "enabled",
	ChannelID:   "channel_id",
	MentionRole: "mention_role",
	FeedName:    "feed_name",
	FeedTitle:   "feed_title",
	FeedURL:     "feed_url",
}

var RSSFeedTableColumns = struct {
	ID          string
	GuildID     string
	CreatedAt   string
	Enabled     string
	ChannelID   string
	MentionRole string
	FeedName    string
	FeedTitle   string
	FeedURL     string
}{
	ID:          "rss_feeds.id",
	GuildID:     "rss_feeds.guild_id",
	CreatedAt:   "rss_feeds.created_at",
	Enabled:     "rss_feeds.enabled",
	ChannelID:   "rss_feeds.channel_id",
	MentionRole: "rss_feeds.mention_role",
	FeedName:    "rss_feeds.feed_name",
	FeedTitle:   "rss_feeds.feed_title",
	FeedURL:     "rss_feeds.feed_url",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var RSSFeedWhere = struct {
	ID          whereHelperint64
	GuildID     whereHelperint64
	CreatedAt   whereHelpertime_Time
	Enabled     whereHelperbool
	ChannelID   whereHelperint64
	MentionRole whereHelperint64
	FeedName    whereHelperstring
	FeedTitle   whereHelperstring
	FeedURL     whereHelperstring
}{
	ID:          whereHelperint64{field: "\"rss_feeds\".\"id\""},
	GuildID:     whereHelperint64{field: "\"rss_feeds\".\"guild_id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"rss_feeds\".\"created_at\""},
	Enabled:     whereHelperbool{field: "\"rss_feeds\".\"enabled\""},
	ChannelID:   whereHelperint64{field: "\"rss_feeds\".\"channel_id\""},
	MentionRole: whereHelperint64{field: "\"rss_feeds\".\"mention_role\""},
	FeedName:    whereHelperstring{field: "\"rss_feeds\".\"feed_name\""},
	FeedTitle:   whereHelperstring{field: "\"rss_feeds\".\"feed_title\""},
	FeedURL:     whereHelperstring{field: "\"rss_feeds\".\"feed_url\""},
}

// RSSFeedRels is where relationship names are stored.
var RSSFeedRels = struct {
}{}

// rssFeedR is where relationships are stored.
type rssFeedR struct {
}

// NewStruct creates a new relationship struct
func (*rssFeedR) NewStruct() *rssFeedR {
	return &rssFeedR{}
}

// rssFeedL is where Load methods for each relationship are stored.
type rssFeedL struct{}

var (
	rssFeedAllColumns            = []string{"id", "guild_id", "created_at", "enabled", "channel_id", "mention_role", "feed_name", "feed_title", "feed_url"}
	rssFeedColumnsWithoutDefault = []string{"guild_id", "created_at", "enabled", "channel_id", "mention_role", "feed_name", "feed_title", "feed_url"}
	rssFeedColumnsWithDefault    = []string{"id"}
	rssFeedPrimaryKeyColumns     = []string{"id"}
	rssFeedGeneratedColumns      = []string{}
)

type (
	// RSSFeedSlice is an alias for a slice of pointers to RSSFeed.
	// This should almost always be used instead of []RSSFeed.
	RSSFeedSlice []*RSSFeed

	rssFeedQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rssFeedType                 = reflect.TypeOf(&RSSFeed{})
	rssFeedMapping              = queries.MakeStructMapping(rssFeedType)
	rssFeedPrimaryKeyMapping, _ = queries.BindMapping(rssFeedType, rssFeedMapping, rssFeedPrimaryKeyColumns)
	rssFeedInsertCacheMut       sync.RWMutex
	rssFeedInsertCache          = make(map[string]insertCache)
	rssFeedUpdateCacheMut       sync.RWMutex
	rssFeedUpdateCache          = make(map[string]updateCache)
	rssFeedUpsertCacheMut       sync.RWMutex
	rssFeedUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single rssFeed record from the query using the global executor.
func (q rssFeedQuery) OneG(ctx context.Context) (*RSSFeed, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single rssFeed record from the query.
func (q rssFeedQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RSSFeed, error) {
	o := &RSSFeed{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rss_feeds")
	}

	return o, nil
}

// AllG returns all RSSFeed records from the query using the global executor.
func (q rssFeedQuery) AllG(ctx context.Context) (RSSFeedSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RSSFeed records from the query.
func (q rssFeedQuery) All(ctx context.Context, exec boil.ContextExecutor) (RSSFeedSlice, error) {
	var o []*RSSFeed

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RSSFeed slice")
	}

	return o, nil
}

// CountG returns the count of all RSSFeed records in the query using the global executor
func (q rssFeedQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RSSFeed records in the query.
func (q rssFeedQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rss_feeds rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q rssFeedQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q rssFeedQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rss_feeds exists")
	}

	return count > 0, nil
}

// RSSFeeds retrieves all the records using an executor.
func RSSFeeds(mods ...qm.QueryMod) rssFeedQuery {
	mods = append(mods, qm.From("\"rss_feeds\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rss_feeds\".*"})
	}

	return rssFeedQuery{q}
}

// FindRSSFeedG retrieves a single record by ID.
func FindRSSFeedG(ctx context.Context, iD int64, selectCols ...string) (*RSSFeed, error) {
	return FindRSSFeed(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRSSFeed retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRSSFeed(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RSSFeed, error) {
	rssFeedObj := &RSSFeed{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rss_feeds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, rssFeedObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rss_feeds")
	}

	return rssFeedObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RSSFeed) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RSSFeed) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rss_feeds provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(rssFeedColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rssFeedInsertCacheMut.RLock()
	cache, cached := rssFeedInsertCache[key]
	rssFeedInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rssFeedAllColumns,
			rssFeedColumnsWithDefault,
			rssFeedColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rssFeedType, rssFeedMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rssFeedType, rssFeedMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rss_feeds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rss_feeds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rss_feeds")
	}

	if !cached {
		rssFeedInsertCacheMut.Lock()
		rssFeedInsertCache[key] = cache
		rssFeedInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single RSSFeed record using the global executor.
// See Update for more documentation.
func (o *RSSFeed) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RSSFeed.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RSSFeed) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	rssFeedUpdateCacheMut.RLock()
	cache, cached := rssFeedUpdateCache[key]
	rssFeedUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rssFeedAllColumns,
			rssFeedPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rss_feeds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rss_feeds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rssFeedPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rssFeedType, rssFeedMapping, append(wl, rssFeedPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rss_feeds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rss_feeds")
	}

	if !cached {
		rssFeedUpdateCacheMut.Lock()
		rssFeedUpdateCache[key] = cache
		rssFeedUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q rssFeedQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q rssFeedQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rss_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rss_feeds")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RSSFeedSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RSSFeedSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rssFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rss_feeds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rssFeedPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rssFeed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rssFeed")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RSSFeed) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RSSFeed) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rss_feeds provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(rssFeedColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rssFeedUpsertCacheMut.RLock()
	cache, cached := rssFeedUpsertCache[key]
	rssFeedUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rssFeedAllColumns,
			rssFeedColumnsWithDefault,
			rssFeedColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rssFeedAllColumns,
			rssFeedPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert rss_feeds, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(rssFeedPrimaryKeyColumns))
			copy(conflict, rssFeedPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rss_feeds\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(rssFeedType, rssFeedMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rssFeedType, rssFeedMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert rss_feeds")
	}

	if !cached {
		rssFeedUpsertCacheMut.Lock()
		rssFeedUpsertCache[key] = cache
		rssFeedUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single RSSFeed record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RSSFeed) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RSSFeed record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RSSFeed) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RSSFeed provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rssFeedPrimaryKeyMapping)
	sql := "DELETE FROM \"rss_feeds\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rss_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rss_feeds")
	}

	return rowsAff, nil
}

func (q rssFeedQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q rssFeedQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rssFeedQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rss_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rss_feeds")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RSSFeedSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RSSFeedSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rssFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rss_feeds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rssFeedPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rssFeed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rss_feeds")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RSSFeed) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no RSSFeed provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RSSFeed) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRSSFeed(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RSSFeedSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty RSSFeedSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RSSFeedSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RSSFeedSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rssFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rss_feeds\".* FROM \"rss_feeds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rssFeedPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RSSFeedSlice")
	}

	*o = slice

	return nil
}

// RSSFeedExistsG checks if the RSSFeed row exists.
func RSSFeedExistsG(ctx context.Context, iD int64) (bool, error) {
	return RSSFeedExists(ctx, boil.GetContextDB(), iD)
}

// RSSFeedExists checks if the RSSFeed row exists.
func RSSFeedExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rss_feeds\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rss_feeds exists")
	}

	return exists, nil
}
